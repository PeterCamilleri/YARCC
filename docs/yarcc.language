# RCCK - The Ruby Compiler Construction Kit
# This parser specification will be translated into Ruby code that implements
# a parser of the same specification.

PARSE_TREE 'V 0.0.5' 'A RCCK parse tree for parsing RCCK parse trees.'
  OPTIONS NO_INDENT;

<% puts "Opening parse of the grammar file #{parser[:source_name]}."
   puts "Description = #{parser[:description]}."
   puts "Version = #{parser[:version]}."

   # The following is a stand-in for the real code.
   true %>

#The first production rule is the top level 'target' rule.
<parse tree>   = ?<init action> <parse tree header> ?<open action> +<statement>
                 "END" ?<close action>;
#Notes:
# The init action is an optional Ruby code block that is called before the
# balance of the parse tree is processed. If this returns false, processing is
# terminated.
#
# The open action is an optional Ruby code block that is called before parsing
# of the target source code commences. If this returns false, processing is
# terminated.
#
# The close action is an optional Ruby code block that is called after parsing
# of the target source code concludes. If this returns false, processing is
# terminated.

<init action> <open action> <close action> = <action>;

<parse tree header> = "PARSE_TREE" <version> <description>
                      ?("OPTIONS" +<option>) ';';

<version> <description> = <string>;

<option>       = "INDENT" | "NO_INDENT"
# Notes:
# INDENT    Source code indenting affects code parsing.
# NO_INDENT Source code indenting ignored. (Default)

<statement>    = <target>   '='  <expression> ';'
               | <set name> "is" <set>        ';';
# Notes:
# Non terminals and char sets may not be redefined.
#
# Forward references are allowed for non terminals but not char sets.
#
# Non terminals and char set may not have the same name.

<target>       = +<non-terminal>;

<set name>     = +[UPPER '_'];

<non-terminal> = '<' +[PRINTABLE - '>'] '>';

<expression>   = <term> *('|' <term>);

<term> = +(<spaces> ?<modifier> <factor> ?(<spaces> '>>' <spaces> <set>));
# Notes:
# The prologue block is used to make additional checks before the parse is
# attempted. If this returns true, the parse proceeds else it is skipped.
#
# The epilogue block is used make additional checks after the parse is
# successful and/or perform any required actions. If it returns true, the
# parse proceeds else it is rolled back.
#
# The >> operator is a peek ahead. The following <set> must be present, but
# is not 'consumed' by the parser.

<modifier>     = '?' | '+' | '*';
# Where:
# ? is 0 or 1 repetitions of the target factor;
# + is 1 or more repetitions;
# * is 0 or more repetitions.

<factor>       = <non-terminal> | <set> | <set name> | <string>
               | <keyword> | <action> | '(' <expression> ')' | '{' <expression> '}'
               | 'INDENT'  | 'OUTDENT'  ;
# Notes:
# The use of { <expression> } denotes that the expression is case insensitive.
#
# If the INDENT option is specified in the parse tree header, then
# an INDENT token is generated each time the code is further indented than
# previously, and an OUTDENT token is generated for each level of indent that
# was removed when the source code is less indented than previously.

<set>          = '[' +<char set> ?('-' +<char set>) ']';
# Notes:
# The char sets in the first section are included in the set.
# The char sets in the optional section following the '-' are excluded.

<char set>     = <character> ?('..' <character>) | <set name> ;
# Notes:
# The following set names are predefined.
# BOF       is Special: Detected when the source has just been opened.
# EOF       is Special: Detected when the source has just been exhausted.
# BOL       is [BOF EOL]
# EOL       is ['\xA;' '\xD;' EOF]
# BREAK     is [' ' '\x9;' BOF EOL]
# PRINTABLE is [ANY - '\x00;'..'\x1F;' '\x7F;']
# ALPHA     is ['A'..'Z' 'a'..'z']                  This definition needs work!
# UPPER     is ['A'..'Z']                           This definition needs work!
# DIGIT     is ['0'..'9']
# HEX       is [DIGIT 'A'..'F' 'a'..'f']
# OCTAL     is ['0'..'7']
# BINARY    is ['0'  '1']
#
# If the set includes either the predefined ANY or PRINTABLE sets, then no
# other sets may be included. Only exclusions are allowed.
#
# A set may not exclude the ANY or PRINTABLE sets.

<spaces>       = *(BREAK | '#' *[PRINTABLE] [EOL]);
# Note:
# Comments are treated as white space.

<character>    = '\'' <in_a_string> '\'';

<string>       = '\'' *<in_a_string> '\'';
# Note:
# The string 'bla' is short for (<spaces> ['b'] ['l'] ['a'])

<keyword>      = '"' +[ALPHA '_'] '"'
# Note:
# The keyword "bla" is short for  ('bla' >> [ANY - ALPHA '_'])

<in a string>  = ([PRINTABLE-'\'' '\\']) | '\\\\' | '\\''
               | ('\\'           +DIGIT  ';')
               | ('\\' ['B' 'b'] +BINARY ';')
               | ('\\' ['O' 'o'] +OCTAL  ';')
               | ('\\' ['X' 'x'] +HEX    ';') ;

<action>       = '<%' *('%' [ANY - '>'] | [ANY - '%']) '%>';
# Note:
# The contents of the action are Ruby code. The syntax of that code is not
# a part of this grammar.

END

<% puts "Closing parse."

   # The following is a stand-in for the real code.
   true %>
